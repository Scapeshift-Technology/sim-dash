name: CI/CD Pipeline

# Trigger the workflow on push to main (for tests/builds) and tags (for releases)
on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ] # Trigger on version tags like v1.0.0
  # Optionally enable manual triggering from the Actions tab
  workflow_dispatch:

jobs:
  # Test job - can be run on a Linux runner to save costs
  test:
    # Run tests on main branch pushes, tag pushes, or manual triggers
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: windows-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Display github.ref
        run: echo "The triggering ref is ${{ github.ref }}"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      # Run tests only on Linux, as they require database connectivity
      # Skip connecting to the real DB in CI by adding a --skip-db flag (if you implement this)
      # or use a test DB container for integration tests
      - name: Mask DB Password
        run: echo "::add-mask::${{ secrets.TEST_DB_PASSWORD }}"

      - name: Run Playwright tests
        run: npm test
        env:
          DB_HOST: ${{ secrets.TEST_DB_HOST }}
          DB_PORT: ${{ secrets.TEST_DB_PORT }}
          DB_NAME: ${{ secrets.TEST_DB_NAME }}
          DB_USER: ${{ secrets.TEST_DB_USER }}
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}

  # Windows build job
  build-windows:
    # Run builds on main branch pushes OR tag pushes
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: test # Only run if tests pass (and tests only run on main/manual)
    runs-on: windows-latest
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Add this step for Windows
      - name: Update package.json version from tag
        if: startsWith(github.ref, 'refs/tags/') # Only run on tag pushes
        # Use PowerShell to remove the leading 'v' from the tag name
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}" -replace '^v', ''
          npm pkg set version="$version"

      - name: Build Windows application
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-app-${{ github.sha }} # Add SHA to artifact name for uniqueness between main/tag builds
          path: dist/*.exe
          if-no-files-found: error

  # macOS build job (Intel + M1)
  build-macos:
    # Run builds on main branch pushes OR tag pushes
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: test # Only run if tests pass (and tests only run on main/manual)
    runs-on: macos-latest
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update package.json version from tag
        if: startsWith(github.ref, 'refs/tags/') # Only run on tag pushes
        # Extract the version number by removing the leading 'v' using shell commands
        run: VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//') && npm pkg set version="$VERSION"

      - name: Build macOS application (x64 + arm64)
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifacts (x64 + arm64)
        uses: actions/upload-artifact@v4
        with:
          name: macos-app-${{ github.sha }} # Add SHA to artifact name for uniqueness
          path: |
            dist/*.dmg
            dist/*-mac.zip
          if-no-files-found: error

  # Release job - runs only on tag pushes
  release:
    needs: [build-windows, build-macos]
    # Only run this job if the trigger was a tag push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest # Use ubuntu for release steps, typically faster/cheaper
    timeout-minutes: 15
    permissions:
      contents: write # Keep this as 'write' - Needed to create releases and upload assets

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-app-${{ github.sha }} # Match the uploaded artifact name
          path: ./artifacts/windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-app-${{ github.sha }} # Match the uploaded artifact name
          path: ./artifacts/macos

      - name: List downloaded files # Optional: for debugging
        run: ls -R ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Use the tag name for the release, e.g., v0.0.1
          tag_name: ${{ github.ref_name }}
          # Use the tag name in the release title, e.g., "Release v0.0.1"
          name: Release ${{ github.ref_name }}
          # Automatically generate release notes based on commits since the last tag
          generate_release_notes: true
          # Optional: Add a custom message to the release body (markdown supported)
          # body: |
          #   Initial public auto-built release.
          #   Download the assets below.
          files: |
            ./artifacts/windows/*.exe
            ./artifacts/macos/*.dmg
            ./artifacts/macos/*.zip
          # Use the default GITHUB_TOKEN for authentication
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 